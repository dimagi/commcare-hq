#!/usr/bin/env python
from __future__ import absolute_import
from __future__ import print_function

import logging
import os
import re
from argparse import ArgumentParser
from os.path import dirname

from ansible.inventory import Inventory
from ansible.parsing.dataloader import DataLoader
from ansible.vars import VariableManager

logging.basicConfig(format='[%(levelname)s] %(message)s')
logger = logging.getLogger(__name__)

ROOT = dirname(dirname(dirname(os.path.abspath(__file__))))


def get_inventory(inventory_path):
    return Inventory(loader=DataLoader(), variable_manager=VariableManager(), host_list=inventory_path)


def _available_environments():
    inventory_root = os.path.join(ROOT, 'fab', 'inventory')
    return [
        file for file in os.listdir(inventory_root)
        if os.path.isfile(os.path.join(inventory_root, file))
    ]


def main():
    parser = ArgumentParser(
        "ETC Hosts",
        description="Generate lines for /etc/hosts from Ansible inventory file."
    )
    parser.add_argument(
        "environment",
        choices=_available_environments(),
        help="Environment to process."
    )
    parser.add_argument(
        "-s", "--suffix",
        help="Optional suffix to append to the hostname e.g. internal-va.commcarehq.org"
    )

    args = parser.parse_args()
    env = args.environment
    suffix = args.suffix

    inventory_path = os.path.join(ROOT, 'fab', 'inventory', env)
    inventory = get_inventory(inventory_path)

    missing_hostname = []
    host_lines = []
    for host in inventory.get_hosts():
        vars = host.get_vars()
        vars.update(host.get_group_vars())
        hostname = vars.get('hostname', None)
        if not hostname:
            # check if host is any groups with only one host and where the group name
            # matches the right format for a host group
            substitute_hostnames = [
                group for group in host.get_groups()
                if re.match(r'^[a-z]*\d+', group.name) and len(group.get_hosts()) == 1
            ]
            if len(substitute_hostnames) == 1:
                hostname = substitute_hostnames[0]
                logger.warn("Using group name '%s' for host '%s'", hostname, host.name)
            else:
                missing_hostname.append(host)
                continue

        line_dict = {
            'ip': host.name,
            'name_env': '%s.%s' % (hostname, env),
            'name_suffix': ''
        }

        if suffix:
            line_dict['name_suffix'] = ' %s.%s' % (hostname, suffix)

        host_lines.append(line_dict)

    host_lines = sorted([line for line in host_lines], key=lambda l: l['name_env'])

    if missing_hostname:
        print("\nThe following hosts have no 'hostname' var:")
        for host in missing_hostname:
            print('\t%s (Groups: %s)' % (host.name, ', '.join(host.get_vars()['group_names'])))

    print("\nCopy these lines to '/etc/hosts' lines:\n")
    print("# Hosts for '%s' environment. Auto-generated by 'etc_hosts' script." % env)
    for line in host_lines:
        print('%(ip)s    %(name_env)s%(name_suffix)s' % line)


if __name__ == '__main__':
    main()
