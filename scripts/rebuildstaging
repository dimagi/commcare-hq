#!/bin/bash

function usage() {
    cat << EOF
usage: $0 [-h|--help] [-v|--verbose] [--deploy|--no-push] [--skip-fetch]

rebuild staging from yaml configuration (scripts/staging.yaml)

    -h --help       print this help text
    -v --verbose    display debugging output
    --deploy        deploy after rebuild is complete
    --no-push       do not push changes (cannot be used with --deploy)
    --skip-fetch    assume local copy is already update date with remote
EOF
}

while [[ $# > 0 ]]
do
    key="$1"
    shift

    case $key in
      --deploy)
        deploy=y
        ;;
      -h|--help)
        usage
        exit
        ;;
      -v|--verbose)
        verbose=y
        ;;
      --skip-fetch)
        skip_fetch=y
        echo skip-fetch
        ;;
      --no-push)
        no_push=y
        echo no-push
        ;;
      *)
        usage
        exit 1
        ;;
    esac
done

function rebuildstaging() {
    python scripts/rebuildstaging.py < scripts/staging.yaml "$@"
}

args=''

[[ $verbose = 'y' ]] && args="$args -v"
[[ $no_push = 'y' ]] && args="$args --no-push"

[[ $skip_fetch = 'y' ]] && args="$args sync rebuild"

# if staging.yaml isn't up-to-date, warn and quit
git fetch origin master
if [[ -n $(git diff origin/master -- scripts/staging.yaml) && $no_push != 'y' ]]
then
    echo "scripts/staging.yaml on this branch different from the one on master"
    echo "Aborting."
    exit 1
fi

if [[ $deploy = 'y' && $no_push != 'y' ]]
then
    rebuildstaging $args && git checkout autostaging && fab staging awesome_deploy:confirm=no
else
    rebuildstaging $args
fi
