--- 
+++ 
@@ -1,5 +1,5 @@
 /* global django */
-hqDefine('userreports/js/v1/builder_view_models', function () {
+hqDefine('userreports/js/builder_view_models', function () {
     'use strict';
 
     var getOrDefault = function(options, key, default_) {
@@ -80,20 +80,44 @@
 
         // The format of the filter. This field is not used if the
         // PropertyListItem is representing columns
+
         self.format = ko.observable("");
-        // The aggregation type for this column. This field is not used if
-        // the PropertyListItem represents columns in a non-aggregated report
-        // or a filter
-        self.calculation = ko.observable(
-            hqImport('userreports/js/v1/constants').DEFAULT_CALCULATION_OPTIONS[0]
-        );
+
+        var constants = hqImport('userreports/js/constants');
         self.calculationOptions = ko.pureComputed(function() {
             var propObject = self.getPropertyObject(self.property());
             if (propObject) {
                 return propObject.aggregation_options;
             }
-            return hqImport('userreports/js/v1/constants').DEFAULT_CALCULATION_OPTIONS;
-        });
+            return constants.DEFAULT_CALCULATION_OPTIONS;
+        });
+
+        this.getDefaultCalculation = function () {
+            if (_.contains(self.calculationOptions(), constants.SUM)) {
+                return constants.SUM;
+            } else {
+                return constants.COUNT_PER_CHOICE;
+            }
+        };
+
+        // The aggregation type for this column. This field is not used if
+        // the PropertyListItem represents columns in a non-aggregated report
+        // or a filter
+        this.calculation = ko.observable(this.getDefaultCalculation());
+
+        // A proxy for calculation that will let us know when calculation has been modified by the user.
+        // This is useful because sometimes the calculation is changed programatically.
+        // This implementation is a simple mirror of calculation, but subclasses may alter it.
+        this.inputBoundCalculation = ko.computed({
+            read: function () {
+                return self.calculation();
+            },
+            write: function (value) {
+                self.calculation(value);
+            },
+            owner: this,
+        });
+
         // for default filters, the value to filter by
         self.filterValue = ko.observable("");
         // for default filters, the dynamic date operator to filter by
@@ -146,11 +170,7 @@
         options = options || {};
 
         var wrapListItem = function (item) {
-            var i = new PropertyListItem(
-                self.getDefaultDisplayText.bind(self),
-                self.getPropertyObject.bind(self),
-                self.hasDisplayCol
-            );
+            var i = self._createListItem();
             i.existsInCurrentVersion(item.exists_in_current_version);
             i.property(getOrDefault(item, 'property', ""));
             i.dataSourceField(getOrDefault(item, 'data_source_field', null));
@@ -171,7 +191,7 @@
         // select2 or questionsSelect binding can handle.
         self.selectablePropertyOptions = options.selectablePropertyOptions;
 
-        self.reportType = options.reportType;
+        self.reportType = ko.observable(options.reportType);
         self.buttonText = getOrDefault(options, 'buttonText', 'Add property');
         // True if at least one column is required.
         self.requireColumns = getOrDefault(options, 'requireColumns', false);
@@ -184,7 +204,7 @@
         self.calcHelpText = getOrDefault(options, 'calcHelpText', null);
         self.filterValueHelpText = getOrDefault(options, 'filterValueHelpText', null);
         self.analyticsAction = getOrDefault(options, 'analyticsAction', null);
-        self.analyticsLabel = getOrDefault(options, 'analyticsLabel', self.reportType);
+        self.analyticsLabel = getOrDefault(options, 'analyticsLabel', this.reportType());
 
         self.hasDisplayCol = getOrDefault(options, 'hasDisplayCol', true);
         self.hasFormatCol = getOrDefault(options, 'hasFormatCol', true);
@@ -196,41 +216,42 @@
         }));
         self.serializedProperties = ko.computed(function(){
             return JSON.stringify(
-                _.map(self.columns(), function(c){return c.toJS();})
+                _.map(
+                    _.filter(self.columns(), function(c){return c.existsInCurrentVersion();}),
+                    function(c){return c.toJS();})
             );
         });
         self.showWarnings = ko.observable(false);
-
-        self.validate = function () {
-            self.showWarnings(true);
-            var columnsValid = !_.contains(
-                _.map(
-                    self.columns(),
-                    function(c){return c.validate();}
-                ),
-                false
-            );
-            var columnLengthValid = !(self.requireColumns && !self.columns().length);
-            if (self.noColumnsValidationCallback && !columnLengthValid){
-                self.noColumnsValidationCallback();
-            }
-            return columnsValid && columnLengthValid;
-        };
-
-        self.buttonHandler = function () {
-            self.columns.push(new PropertyListItem(
-                self.getDefaultDisplayText.bind(self),
-                self.getPropertyObject.bind(self)
-            ));
-            if (!_.isEmpty(self.analyticsAction) && !_.isEmpty(self.analyticsLabel)){
-                window.analytics.usage("Report Builder", self.analyticsAction, self.analyticsLabel);
-                window.analytics.workflow("Clicked " + self.analyticsAction + " in Report Builder");
-            }
-        };
-
-    };
-
-
+    };
+    PropertyList.prototype._createListItem = function() {
+        return new PropertyListItem(
+            this.getDefaultDisplayText.bind(this),
+            this.getPropertyObject.bind(this),
+            this.hasDisplayCol
+        );
+    };
+    PropertyList.prototype.validate = function () {
+        this.showWarnings(true);
+        var columnsValid = !_.contains(
+            _.map(
+                this.columns(),
+                function(c){return c.validate();}
+            ),
+            false
+        );
+        var columnLengthValid = !(this.requireColumns && !this.columns().length);
+        if (this.noColumnsValidationCallback && !columnLengthValid){
+            this.noColumnsValidationCallback();
+        }
+        return columnsValid && columnLengthValid;
+    };
+    PropertyList.prototype.buttonHandler = function () {
+        this.columns.push(this._createListItem());
+        if (!_.isEmpty(this.analyticsAction) && !_.isEmpty(this.analyticsLabel)){
+            window.analytics.usage("Report Builder", this.analyticsAction, this.analyticsLabel);
+            window.analytics.workflow("Clicked " + this.analyticsAction + " in Report Builder");
+        }
+    };
     /**
      * Return the default display text for this property. For questions, it is
      * the question label.
@@ -254,72 +275,6 @@
      */
     PropertyList.prototype.getPropertyObject = function(property_id) {
         return _.find(this.propertyOptions, function (opt) {return opt.id === property_id;});
-    };
-
-    /**
-     * Return an object representing the given DataSourceProperty object
-     * in the format expected by the select2 binding.
-     * @param {object} dataSourceProperty - A js object representation of a
-     *  DataSourceProperty python object.
-     * @returns {object} - A js object in the format expected by the select2
-     *  knockout binding.
-     */
-    var convertDataSourcePropertyToSelect2Format = function (dataSourceProperty) {
-        return dataSourceProperty;
-    };
-    /**
-     * Return an object representing the given DataSourceProperty object
-     * in the format expected by the questionsSelect binding.
-     * @param {object} dataSourceProperty - A js object representation of a
-     *  DataSourceProperty python object.
-     * @returns {object} - A js object in the format expected by the questionsSelect
-     *  knockout binding.
-     */
-    var convertDataSourcePropertyToQuestionsSelectFormat = function (dataSourceProperty) {
-        if (dataSourceProperty.type === 'question') {
-            return dataSourceProperty.source;
-        } else if (dataSourceProperty.type === 'meta') {
-            return {
-                value: dataSourceProperty.source[0],
-                label: dataSourceProperty.text,
-                type: dataSourceProperty.type,
-            };
-        }
-    };
-    /**
-     * Return an object representing the given ColumnOption object in the format
-     * expected by the select2 binding.
-     * @param {object} columnOption - A js object representation of a
-     *  ColumnOption python object.
-     * @returns {object} - A js object in the format expected by the select2
-     *  knockout binding.
-     */
-    var convertReportColumnOptionToSelect2Format = function (columnOption) {
-        return {
-            id: columnOption.id,
-            text: columnOption.display,
-        };
-    };
-    /**
-     * Return an object representing the given ColumnOption object in the format
-     * expected by the questionsSelect binding.
-     * @param {object} columnOption - A js object representation of a
-     *  ColumnOption python object.
-     * @returns {object} - A js object in the format expected by the questionsSelect
-     *  knockout binding.
-     */
-    var convertReportColumnOptionToQuestionsSelectFormat = function (columnOption) {
-        var questionSelectRepresentation;
-        if (columnOption.question_source) {
-            questionSelectRepresentation = Object.assign({}, columnOption.question_source);
-        } else {
-            questionSelectRepresentation = {
-                value: columnOption.id,
-                label: columnOption.display,
-            };
-        }
-        questionSelectRepresentation.aggregation_options = columnOption.aggregation_options;
-        return questionSelectRepresentation;
     };
 
     var ConfigForm = function (
@@ -335,6 +290,8 @@
             groupByInitialValue
     ) {
         var self = this;
+        var constants = hqImport('userreports/js/constants');
+
         self.optionsContainQuestions = _.any(dataSourceIndicators, function (o) {
             return o.type === 'question';
         });
@@ -344,22 +301,24 @@
         self.isGroupByRequired = ko.observable(isGroupByRequired);
         self.showGroupByValidationError = ko.observable(false);
 
+        var utils = hqImport("userreports/js/utils");
+
         // Convert the DataSourceProperty and ColumnOption passed through the template
         // context into objects with the correct format for the select2 and
         // questionsSelect knockout bindings.
         if (self.optionsContainQuestions) {
             self.selectableDataSourceIndicators = _.compact(_.map(
-                self.dataSourceIndicators, convertDataSourcePropertyToQuestionsSelectFormat
+                self.dataSourceIndicators, utils.convertDataSourcePropertyToQuestionsSelectFormat
             ));
             self.selectableReportColumnOptions = _.compact(_.map(
-                self.reportColumnOptions, convertReportColumnOptionToQuestionsSelectFormat
+                self.reportColumnOptions, utils.convertReportColumnOptionToQuestionsSelectFormat
             ));
         } else {
             self.selectableDataSourceIndicators = _.compact(_.map(
-                self.dataSourceIndicators, convertDataSourcePropertyToSelect2Format
+                self.dataSourceIndicators, utils.convertDataSourcePropertyToSelect2Format
             ));
             self.selectableReportColumnOptions = _.compact(_.map(
-                self.reportColumnOptions, convertReportColumnOptionToSelect2Format
+                self.reportColumnOptions, utils.convertReportColumnOptionToSelect2Format
             ));
         }
         self.dateRangeOptions = dateRangeOptions;
@@ -394,7 +353,7 @@
         });
         self.columnsList = new PropertyList({
             hasFormatCol: false,
-            hasCalculationCol: reportType === "table" || reportType === "worker",
+            hasCalculationCol: reportType === constants.REPORT_TYPE_TABLE,
             initialCols: columns,
             buttonText: 'Add Column',
             analyticsAction: 'Add Column',
