# Generated by Django 3.2.23 on 2023-12-12 01:18

from django.db import migrations, transaction
from django.db.models import Q
from corehq.sql_db.util import paginate_query
from dimagi.utils.chunked import chunked


def forwards_func(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    process_records(db_alias=db_alias)


def reverse_func(apps, schema_editor):
    # Reverse isn't particularly important here, because generally we'd want to revert both this
    # and the prior commit, dropping the table entirely
    pass


def process_records(batch_size=500, db_alias=None):
    from corehq.form_processor.models.cases import CommCareCase
    from corehq.apps.data_interfaces.models import CaseDuplicate, CaseDuplicateNew

    for batch in batch_query(db_alias, CaseDuplicate, Q(), batch_size):
        with transaction.atomic():
            inserts = []
            for duplicate in batch:
                case = CommCareCase.objects.get_case(duplicate.case_id)
                new_record = CaseDuplicateNew.create(case, duplicate.action, save=False)
                inserts.append(new_record)
            CaseDuplicateNew.objects.bulk_create(inserts, ignore_conflicts=True)


def batch_query(db_alias, model, query, batch_size):
    it = paginate_query(db_alias, model, query, query_size=batch_size)
    return chunked(it, batch_size)


class Migration(migrations.Migration):

    dependencies = [
        ('data_interfaces', '0035_add_case_duplicate_new'),
    ]

    operations = [
        migrations.RunPython(forwards_func, reverse_func, elidable=True)
    ]
