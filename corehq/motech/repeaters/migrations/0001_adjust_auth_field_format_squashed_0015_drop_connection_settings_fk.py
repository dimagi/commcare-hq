# Generated by Django 3.2.16 on 2023-04-12 19:16

import corehq.motech.dhis2.repeaters
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import jsonfield.fields

# View for insert via foreign data wrapper
# https://stackoverflow.com/a/62464669/10840
REPEATER_SEQ = """
    CREATE VIEW repeaters_repeater_id_seq_view AS
        SELECT nextval('repeaters_repeater_id_seq') as value;
    CREATE RULE repeaters_repeater_id_seq_view_update
        AS ON UPDATE TO repeaters_repeater_id_seq_view DO INSTEAD
        SELECT setval('repeaters_repeater_id_seq', NEW.value, true);
"""
UNDO_REPEATER_SEQ = """
    DROP VIEW repeaters_repeater_id_seq_view;
"""

REPEATERS_APP_LABEL = "repeaters"


class RepeaterDbSQL(migrations.RunSQL):

    def database_forwards(self, app_label, schema_editor, from_state, to_state):
        if self.should_apply(schema_editor):
            super().database_forwards(app_label, schema_editor, from_state, to_state)

    def database_backwards(self, app_label, schema_editor, from_state, to_state):
        if self.should_apply(schema_editor):
            super().database_backwards(app_label, schema_editor, from_state, to_state)

    def should_apply(self, schema_editor):
        repeaters_db = settings.CUSTOM_DB_ROUTING.get(REPEATERS_APP_LABEL, object())
        return schema_editor.connection.alias == repeaters_db


class Migration(migrations.Migration):

    replaces = [
        ('repeaters', '0001_adjust_auth_field_format'),
        ('repeaters', '0002_sqlrepeatrecord'),
        ('repeaters', '0003_migrate_connectionsettings'),
        ('repeaters', '0004_attempt_strings'),
        ('repeaters', '0005_rename_repeaterstub_to_sql_repeater'),
        ('repeaters', '0006_add_proxy_models'),
        ('repeaters', '0007_migrate_to_sql'),
        ('repeaters', '0008_add_related_name_in_connection_settings'),
        ('repeaters', '0009_add_create_update_info'),
        ('repeaters', '00010_add_repeater_name'),
        ('repeaters', '0011_alter_sqlrepeater_name'),
        ('repeaters', '00012_create_default_names_for_repeaters'),
        ('repeaters', '0013_rename_sqlrepeaters_to_repeaters'),
        ('repeaters', '0014_add_new_state_empty'),
        ('repeaters', '0015_drop_connection_settings_fk'),
    ]

    dependencies = [
        ('motech', '0007_auto_20200909_2138'),
        ('motech', '0008_requestlog_response_headers'),
        ('motech', '0011_connectionsettings_is_deleted'),
    ]

    operations = [
        migrations.CreateModel(
            name='Repeater',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.CharField(db_index=True, max_length=126)),
                ('repeater_id', models.CharField(max_length=36, unique=True)),
                ('is_paused', models.BooleanField(default=False)),
                ('next_attempt_at', models.DateTimeField(blank=True, null=True)),
                ('last_attempt_at', models.DateTimeField(blank=True, null=True)),
                ('connection_settings_id', models.IntegerField(db_index=True)),
                ('format', models.CharField(max_length=64, null=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('options', jsonfield.fields.JSONField(default=dict)),
                ('repeater_type', models.CharField(blank=True, max_length=64)),
                ('request_method', models.CharField(choices=[
                    ('DELETE', 'DELETE'),
                    ('POST', 'POST'),
                    ('PUT', 'PUT')
                ], default='POST', max_length=16)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, null=True)),
            ],
            options={
                'db_table': 'repeaters_repeater',
            },
        ),
        migrations.CreateModel(
            name='SQLRepeatRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.CharField(max_length=126)),
                ('couch_id', models.CharField(blank=True, max_length=36, null=True)),
                ('payload_id', models.CharField(max_length=36)),
                ('state', models.TextField(choices=[
                    ('PENDING', 'Pending'),
                    ('SUCCESS', 'Succeeded'),
                    ('FAIL', 'Failed'),
                    ('CANCELLED', 'Cancelled'),
                    ('EMPTY', 'Empty')
                ], default='PENDING')),
                ('registered_at', models.DateTimeField()),
                ('repeater', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE,
                    related_name='repeat_records',
                    to='repeaters.repeater',
                )),
            ],
            options={
                'db_table': 'repeaters_repeatrecord',
                'ordering': ['registered_at'],
            },
        ),
        migrations.CreateModel(
            name='SQLRepeatRecordAttempt',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.TextField(choices=[
                    ('PENDING', 'Pending'),
                    ('SUCCESS', 'Succeeded'),
                    ('FAIL', 'Failed'),
                    ('CANCELLED', 'Cancelled'),
                    ('EMPTY', 'Empty')
                ])),
                ('message', models.TextField(blank=True, default='')),
                ('traceback', models.TextField(blank=True, default='')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('repeat_record', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE,
                    to='repeaters.sqlrepeatrecord',
                )),
            ],
            options={
                'db_table': 'repeaters_repeatrecordattempt',
                'ordering': ['created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='sqlrepeatrecord',
            index=models.Index(fields=['domain'], name='repeaters_r_domain_3ae9ab_idx'),
        ),
        migrations.AddIndex(
            model_name='sqlrepeatrecord',
            index=models.Index(fields=['couch_id'], name='repeaters_r_couch_i_ea5782_idx'),
        ),
        migrations.AddIndex(
            model_name='sqlrepeatrecord',
            index=models.Index(fields=['payload_id'], name='repeaters_r_payload_f64556_idx'),
        ),
        migrations.AddIndex(
            model_name='sqlrepeatrecord',
            index=models.Index(fields=['registered_at'], name='repeaters_r_registe_b48c68_idx'),
        ),
        migrations.CreateModel(
            name='AppStructureRepeater',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('repeaters.repeater',),
        ),
        migrations.CreateModel(
            name='BaseExpressionRepeater',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('repeaters.repeater',),
        ),
        migrations.CreateModel(
            name='CaseRepeater',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('repeaters.repeater',),
        ),
        migrations.CreateModel(
            name='FormRepeater',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('repeaters.repeater',),
        ),
        migrations.CreateModel(
            name='LocationRepeater',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('repeaters.repeater',),
        ),
        migrations.CreateModel(
            name='ShortFormRepeater',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('repeaters.repeater',),
        ),
        migrations.CreateModel(
            name='UserRepeater',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('repeaters.repeater',),
        ),
        migrations.CreateModel(
            name='BaseCOWINRepeater',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('repeaters.caserepeater',),
        ),
        migrations.CreateModel(
            name='CaseExpressionRepeater',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('repeaters.baseexpressionrepeater',),
        ),
        migrations.CreateModel(
            name='CreateCaseRepeater',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('repeaters.caserepeater',),
        ),
        migrations.CreateModel(
            name='Dhis2EntityRepeater',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('repeaters.caserepeater', corehq.motech.dhis2.repeaters.Dhis2Instance),
        ),
        migrations.CreateModel(
            name='Dhis2Repeater',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('repeaters.formrepeater', corehq.motech.dhis2.repeaters.Dhis2Instance),
        ),
        migrations.CreateModel(
            name='FHIRRepeater',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('repeaters.caserepeater',),
        ),
        migrations.CreateModel(
            name='OpenmrsRepeater',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('repeaters.caserepeater',),
        ),
        migrations.CreateModel(
            name='UpdateCaseRepeater',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('repeaters.caserepeater',),
        ),
        migrations.CreateModel(
            name='BeneficiaryRegistrationRepeater',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('repeaters.basecowinrepeater',),
        ),
        migrations.CreateModel(
            name='BeneficiaryVaccinationRepeater',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('repeaters.basecowinrepeater',),
        ),
        migrations.CreateModel(
            name='DataRegistryCaseUpdateRepeater',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('repeaters.createcaserepeater',),
        ),
        migrations.CreateModel(
            name='ReferCaseRepeater',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('repeaters.createcaserepeater',),
        ),
        RepeaterDbSQL(REPEATER_SEQ, UNDO_REPEATER_SEQ),
    ]
