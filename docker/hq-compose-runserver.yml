version: '2.3'

services:
  web:
    build:
      context: .
      dockerfile: "${DOCKERFILE}"
    environment:
      COMMCAREHQ_BOOTSTRAP: "yes"
      DEPENDENT_SERVICES: "couch:5984 postgres:5432 redis:6379 elasticsearch2:9200 minio:9980 kafka:9092"
      DOCKER_HQ_OVERLAY: "${DOCKER_HQ_OVERLAY}"
      DOCKER_HQ_OVERLAYFS_CHMOD: "${DOCKER_HQ_OVERLAYFS_CHMOD}"
      DOCKER_HQ_OVERLAYFS_METACOPY: "${DOCKER_HQ_OVERLAYFS_METACOPY}"
    privileged: true  # allows mount inside container
    command: [runserver]
    depends_on:
      postgres:
        condition: service_started
      couch:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch2:
        condition: service_healthy
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_started
      minio:
        condition: service_healthy
    expose:
      - 8000
    ports:
      - "8000:8000"
    volumes:
      - ..:/mnt/commcare-hq-ro:ro
      - ${VOLUME_PREFIX}lib:/mnt/lib

  formplayer:
    extends:
      file: hq-compose.yml
      service: formplayer
    environment:
        COMMCARE_HOST: "http://web:8000"
    depends_on:
      - postgres
      - redis
    ports:
      - "8080:8080"
      - "8081:8081"

  postgres:
    extends:
      file: hq-compose-services.yml
      service: postgres

  couch:
    extends:
      file: hq-compose-services.yml
      service: couch

  redis:
    extends:
      file: hq-compose-services.yml
      service: redis

  elasticsearch2:
    extends:
      file: hq-compose-services.yml
      service: elasticsearch2

  elasticsearch5:
    extends:
      file: hq-compose-services.yml
      service: elasticsearch5

  zookeeper:
    extends:
      file: hq-compose-services.yml
      service: zookeeper

  kafka:
    extends:
      file: hq-compose-services.yml
      service: kafka

  minio:
    extends:
      file: hq-compose-services.yml
      service: minio
